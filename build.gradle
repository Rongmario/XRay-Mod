import org.jetbrains.gradle.ext.Gradle

plugins {
    id 'java-library'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.7'
    id 'com.gtnewhorizons.retrofuturagradle' version '1.2.5'
}

// Project properties
group = 'zone.rong.xray'
version = '2.0'

// Set the toolchain version to decouple the Java we run Gradle with from the Java used to compile and run the mod
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
        // Azul covers the most platforms for Java 8 toolchains, crucially including MacOS arm64
        vendor.set(org.gradle.jvm.toolchain.JvmVendorSpec.AZUL)
    }
    // Generate sources and javadocs jars when building and publishing
    withSourcesJar()
    withJavadocJar()
}

// Most RFG configuration lives here, see the JavaDoc for com.gtnewhorizons.retrofuturagradle.MinecraftExtension
minecraft {
    mcVersion = '1.7.10'
}

// Put the version from gradle into mcmod.info
tasks.processResources.configure {
    inputs.property 'version', project.version
    filesMatching(['mcmod.info']) { fcd ->
        fcd.expand ('version': project.version)
    }
}

// Dependencies
repositories {
    maven {
        name = 'OvermindDL1 Maven'
        url = uri 'https://gregtech.overminddl1.com/'
        mavenContent {
            excludeGroup 'net.minecraftforge' // missing the `universal` artefact
        }
    }
    maven {
        name = 'GTNH Maven'
        url = uri 'http://jenkins.usrv.eu:8081/nexus/content/groups/public/'
        allowInsecureProtocol = true
    }
}

dependencies {
    // Adds NotEnoughItems and its dependencies (CCL&CCC) to runClient/runServer
    runtimeOnly 'com.github.GTNewHorizons:NotEnoughItems:2.3.39-GTNH:dev'
    implementation rfg.deobf(project.files("libs/industrialcraft.jar"))
    implementation rfg.deobf(project.files("libs/gregtech.jar"))
    // Example: grab the ic2 jar from curse maven and deobfuscate
    // api(rfg.deobf("curse.maven:ic2-242638:2353971"))
    // Example: grab the ic2 jar from libs/ in the workspace and deobfuscate
    // api(rfg.deobf(project.files("libs/ic2.jar")))
}

idea {
    module {
        inheritOutputDirs = true
    }
    project {
        settings {
            runConfigurations {
                "1. Run Client"(Gradle) {
                    taskNames = ["runClient"]
                }
                "2. Run Server"(Gradle) {
                    taskNames = ["runServer"]
                }
                "3. Run Obfuscated Client"(Gradle) {
                    taskNames = ["runObfClient"]
                }
                "4. Run Obfuscated Server"(Gradle) {
                    taskNames = ["runObfServer"]
                }
            }
            compiler.javac {
                afterEvaluate {
                    javacAdditionalOptions = "-encoding utf8"
                    moduleJavacAdditionalOptions = [(project.name + ".main"): tasks.compileJava.options.compilerArgs.collect { '"' + it + '"' }.join(' ')]
                }
            }
        }
    }
}
